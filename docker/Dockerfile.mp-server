# Build stage
FROM rust:1.76-alpine AS builder

# Install system dependencies
RUN apk add --no-cache musl-dev

WORKDIR /workdir

# Copy Cargo files
COPY Cargo.toml ./
COPY server/Cargo.toml ./server/
COPY crates/ ./crates/

# Create dummy source files to cache dependencies
RUN mkdir -p server/src && echo "fn main() {}" > server/src/main.rs
RUN find crates -name "Cargo.toml" -exec dirname {} \; | xargs -I {} mkdir -p {}/src
RUN find crates -name "Cargo.toml" -exec dirname {} \; | xargs -I {} touch {}/src/lib.rs

# Build dependencies
RUN cargo build --release --bin mp-server
RUN rm -rf server/src crates/*/src

# Copy actual source code
COPY server/src ./server/src
COPY crates/*/src ./crates/*/src

# Build the application
RUN touch server/src/main.rs
RUN cargo build --release --bin mp-server

# Runtime stage
FROM alpine:3.19 AS runtime

# Install runtime dependencies
RUN apk add --no-cache curl ca-certificates

WORKDIR /workdir

# Copy the binary
COPY --from=builder /workdir/target/release/mp-server /usr/local/bin/mp-server

# Copy migrations
COPY --from=builder /workdir/crates/mp-db/migrations ./migrations

ENV MP_SERVER_PUBLIC_DIR=/workdir/public

# Health check
HEALTHCHECK --interval=30s --timeout=5s --start-period=5s --retries=3 \
  CMD curl -f http://localhost:${MP_SERVER_PORT:-3000}/health || exit 1

EXPOSE 3000

CMD ["mp-server"]