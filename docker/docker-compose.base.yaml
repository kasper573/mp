services:
  keycloak:
    build:
      dockerfile: ./Dockerfile.keycloak
      context: .
    image: ${DOCKER_REGISTRY_URL:-mp}/mp-keycloak:${DOCKER_IMAGE_VERSION:-latest}
    command: start --optimized --import-realm
    volumes:
      - ./keycloak/import:/opt/keycloak/data/import
    depends_on:
      postgres:
        condition: service_healthy

  # the keycloak image itself is so bare bones for security reasons that it doesn't have curl,
  # so we use a separate container to run healthchecks on keycloak externally.
  keycloak-healthcheck:
    image: curlimages/curl
    command: ["sh", "-c", "sleep infinity"]
    healthcheck:
      test: ["CMD", "curl", "-fsS", "http://keycloak:9000/health/live"]
      interval: 3s
      timeout: 5s
      retries: 9

  postgres:
    image: postgres:16.4
    restart: always
    volumes:
      - /var/lib/postgresql/data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7.4.1
    restart: always

  prometheus:
    image: prom/prometheus:v2.55.1
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus

  node_exporter:
    image: prom/node-exporter:v1.8.2

  grafana:
    image: grafana/grafana:10.4.12
    volumes:
      - grafana-data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning
      - ./grafana/dashboards:/etc/grafana/dashboards

  caddy:
    build:
      dockerfile: ./Dockerfile.caddy
      context: .
    image: ${DOCKER_REGISTRY_URL:-mp}/mp-caddy:${DOCKER_IMAGE_VERSION:-latest}
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
      - "443:443/udp"
    volumes:
      - ./caddy:/etc/caddy/
      - caddy-data:/data
      - caddy-config:/config

volumes:
  grafana-data:
  caddy-data:
  caddy-config:
  prometheus-data:
