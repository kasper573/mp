prometheus.scrape "mp" {
	targets = [{
		__address__ = "mp-server:9999",
	}]
	forward_to      = [prometheus.remote_write.default.receiver]
	job_name        = "mp"
	scrape_interval = "15s"
}

prometheus.scrape "node_exporter" {
	targets = [{
		__address__ = "node_exporter:9100",
	}]
	forward_to      = [prometheus.remote_write.default.receiver]
	job_name        = "node_exporter"
	scrape_interval = "15s"
}

prometheus.scrape "keycloak" {
	targets = [{
		__address__ = "keycloak:9000",
	}]
	forward_to      = [prometheus.remote_write.default.receiver]
	job_name        = "keycloak"
	scrape_interval = "15s"
}

prometheus.remote_write "default" {
	endpoint {
		name = "mp"
		url  = "http://mimir:9009/api/v1/push"

		queue_config { }

		metadata_config { }
	}
}

local.file_match "system" {
	path_targets = [{
		__address__ = "localhost",
		__path__    = "/var/log/*log",
		job         = "system_logs",
	}]
}

loki.source.file "system" {
	targets               = local.file_match.system.targets
	forward_to            = [loki.write.default.receiver]
	legacy_positions_file = "/tmp/positions.yaml"
}

local.file_match "mp_client_trace" {
	path_targets = [{
		__address__ = "localhost",
		__path__    = env("MP_SERVER_CLIENT_TRACE_LOG_PATH"),
		job         = "mp_client_trace_logs",
	}]
}

loki.process "mp_client_trace" {
	forward_to = [loki.write.default.receiver]

	stage.json {
		expressions = {
			args          = "args",
			build_version = "buildVersion",
			message       = "message",
			session_id    = "sessionId",
			stack         = "stack",
			ts            = "ts",
			type          = "type",
			user_id       = "userId",
		}
	}

	stage.timestamp {
		source = "ts"
		format = "ISO8601"
	}

	stage.labels {
		values = {
			build_version = null,
			session_id    = null,
			type          = null,
			user_id       = null,
		}
	}
}

loki.source.file "mp_client_trace" {
	targets               = local.file_match.mp_client_trace.targets
	forward_to            = [loki.process.mp_client_trace.receiver]
	legacy_positions_file = "/tmp/positions.yaml"
}

local.file_match "containers" {
	path_targets = [{
		__address__ = "localhost",
		__path__    = "/var/lib/docker/containers/*/*log",
		job         = "container_logs",
	}]
}

loki.process "containers" {
	forward_to = [loki.write.default.receiver]

	stage.json {
		expressions = {
			attrs  = "",
			output = "log",
			stream = "stream",
		}
	}

	stage.json {
		expressions = {
			tag = "",
		}
		source = "attrs"
	}

	stage.regex {
		expression = "(?P<image_name>(?:[^|]*[^|])).(?P<container_name>(?:[^|]*[^|])).(?P<image_id>(?:[^|]*[^|])).(?P<container_id>(?:[^|]*[^|]))"
		source     = "tag"
	}

	stage.timestamp {
		source = "time"
		format = "RFC3339Nano"
	}

	stage.labels {
		values = {
			container_id   = null,
			container_name = null,
			image_id       = null,
			image_name     = null,
			stream         = null,
			tag            = null,
		}
	}

	stage.output {
		source = "output"
	}
}

loki.source.file "containers" {
	targets               = local.file_match.containers.targets
	forward_to            = [loki.process.containers.receiver]
	legacy_positions_file = "/tmp/positions.yaml"
}

loki.write "default" {
	endpoint {
		url = "http://loki:3100/loki/api/v1/push"
	}
	external_labels = {}
}
