/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './../../routes/~__root'
import { Route as SandboxRouteImport } from './../../routes/~sandbox'
import { Route as PlayRouteImport } from './../../routes/~play'
import { Route as ContactRouteImport } from './../../routes/~contact'
import { Route as AuthCallbackRouteImport } from './../../routes/~auth-callback'
import { Route as ActorTesterRouteImport } from './../../routes/~actor-tester'
import { Route as IndexRouteImport } from './../../routes/~index'

const SandboxRoute = SandboxRouteImport.update({
  id: '/sandbox',
  path: '/sandbox',
  getParentRoute: () => rootRouteImport,
} as any)
const PlayRoute = PlayRouteImport.update({
  id: '/play',
  path: '/play',
  getParentRoute: () => rootRouteImport,
} as any)
const ContactRoute = ContactRouteImport.update({
  id: '/contact',
  path: '/contact',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthCallbackRoute = AuthCallbackRouteImport.update({
  id: '/auth-callback',
  path: '/auth-callback',
  getParentRoute: () => rootRouteImport,
} as any)
const ActorTesterRoute = ActorTesterRouteImport.update({
  id: '/actor-tester',
  path: '/actor-tester',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/actor-tester': typeof ActorTesterRoute
  '/auth-callback': typeof AuthCallbackRoute
  '/contact': typeof ContactRoute
  '/play': typeof PlayRoute
  '/sandbox': typeof SandboxRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/actor-tester': typeof ActorTesterRoute
  '/auth-callback': typeof AuthCallbackRoute
  '/contact': typeof ContactRoute
  '/play': typeof PlayRoute
  '/sandbox': typeof SandboxRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/actor-tester': typeof ActorTesterRoute
  '/auth-callback': typeof AuthCallbackRoute
  '/contact': typeof ContactRoute
  '/play': typeof PlayRoute
  '/sandbox': typeof SandboxRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/actor-tester'
    | '/auth-callback'
    | '/contact'
    | '/play'
    | '/sandbox'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/actor-tester'
    | '/auth-callback'
    | '/contact'
    | '/play'
    | '/sandbox'
  id:
    | '__root__'
    | '/'
    | '/actor-tester'
    | '/auth-callback'
    | '/contact'
    | '/play'
    | '/sandbox'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  ActorTesterRoute: typeof ActorTesterRoute
  AuthCallbackRoute: typeof AuthCallbackRoute
  ContactRoute: typeof ContactRoute
  PlayRoute: typeof PlayRoute
  SandboxRoute: typeof SandboxRoute
}

declare module '@tanstack/solid-router' {
  interface FileRoutesByPath {
    '/sandbox': {
      id: '/sandbox'
      path: '/sandbox'
      fullPath: '/sandbox'
      preLoaderRoute: typeof SandboxRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/play': {
      id: '/play'
      path: '/play'
      fullPath: '/play'
      preLoaderRoute: typeof PlayRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/contact': {
      id: '/contact'
      path: '/contact'
      fullPath: '/contact'
      preLoaderRoute: typeof ContactRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/auth-callback': {
      id: '/auth-callback'
      path: '/auth-callback'
      fullPath: '/auth-callback'
      preLoaderRoute: typeof AuthCallbackRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/actor-tester': {
      id: '/actor-tester'
      path: '/actor-tester'
      fullPath: '/actor-tester'
      preLoaderRoute: typeof ActorTesterRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  ActorTesterRoute: ActorTesterRoute,
  AuthCallbackRoute: AuthCallbackRoute,
  ContactRoute: ContactRoute,
  PlayRoute: PlayRoute,
  SandboxRoute: SandboxRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
