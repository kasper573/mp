name: Test, Build, Deploy
on: [push]

env:
  TURBO_TOKEN: ${{ secrets.TURBO_TOKEN }}
  TURBO_TEAM: ${{ secrets.TURBO_TEAM }}
  DOCKER_REGISTRY: ghcr.io
  DOCKER_USERNAME: ${{ github.actor }}
  DOCKER_PASSWORD: ${{ secrets.GITHUB_TOKEN }}
  DOCKER_REGISTRY_URL: ghcr.io/${{ github.actor }}
  DOCKER_COMPOSE_ENV: prod
  DOCKER_IMAGE_VERSION: latest
  BUILD_VERSION: ${{ github.run_number }}
  MP_DOMAIN: ${{ vars.MP_DOMAIN }}

jobs:
  conventions:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/workflows/composites/install_node_things/
      - run: pnpm lint
      - run: pnpm format

  build-and-test:
    runs-on: ubuntu-latest

    permissions:
      contents: read
      packages: write
      id-token: write

    steps:
      - uses: actions/checkout@v4
      - name: Log in with Docker
        uses: docker/login-action@v3
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ env.DOCKER_USERNAME }}
          password: ${{ env.DOCKER_PASSWORD }}

      - name: Build docker images
        run: cd docker && docker compose build

      - uses: ./.github/workflows/composites/install_node_things/
      - run: pnpm test

      - name: Push docker images
        if: github.ref_name == 'main'
        run: cd docker && docker compose push

  deploy:
    needs: [conventions, build-and-test]
    if: github.ref_name == 'main'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Upload docker compose runtime dependencies
        uses: burnett01/rsync-deployments@7.0.1
        with:
          switches: -avz --delete
          path: docker/
          remote_path: ~/docker
          remote_host: ${{ vars.DEPLOY_SSH_HOST }}
          remote_user: ${{ vars.DEPLOY_SSH_USERNAME }}
          remote_key: ${{ secrets.DEPLOY_SSH_KEY }}

      - name: Deploy via SSH action
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ vars.DEPLOY_SSH_HOST }}
          username: ${{ vars.DEPLOY_SSH_USERNAME }}
          key: ${{ secrets.DEPLOY_SSH_KEY }}
          script_stop: true
          script: |
            cd ~/docker

            # Set production host env vars
            echo "DOCKER_COMPOSE_ENV=\"${{ env.DOCKER_COMPOSE_ENV }}\"" > .env
            echo "DOCKER_REGISTRY_URL=\"${{ env.DOCKER_REGISTRY_URL }}\"" >> .env
            echo "DOCKER_IMAGE_VERSION=\"${{ env.DOCKER_IMAGE_VERSION }}\"" >> .env
            echo "MP_BUILD_VERSION=\"${{ env.BUILD_VERSION }}\"" >> .env
            echo "MP_DOMAIN=\"${{ env.MP_DOMAIN }}\"" >> .env

            echo ${{ env.DOCKER_PASSWORD }} | docker login ${{ env.DOCKER_REGISTRY }} -u ${{ env.DOCKER_USERNAME }} --password-stdin
            docker compose pull
            docker compose down
            docker compose up -d --remove-orphans --no-build
            docker system prune -f
            docker image prune -af
